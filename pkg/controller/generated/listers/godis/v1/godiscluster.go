/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/KumKeeHyun/godis/pkg/controller/apis/godis/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GodisClusterLister helps list GodisClusters.
// All objects returned here must be treated as read-only.
type GodisClusterLister interface {
	// List lists all GodisClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.GodisCluster, err error)
	// GodisClusters returns an object that can list and get GodisClusters.
	GodisClusters(namespace string) GodisClusterNamespaceLister
	GodisClusterListerExpansion
}

// godisClusterLister implements the GodisClusterLister interface.
type godisClusterLister struct {
	indexer cache.Indexer
}

// NewGodisClusterLister returns a new GodisClusterLister.
func NewGodisClusterLister(indexer cache.Indexer) GodisClusterLister {
	return &godisClusterLister{indexer: indexer}
}

// List lists all GodisClusters in the indexer.
func (s *godisClusterLister) List(selector labels.Selector) (ret []*v1.GodisCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GodisCluster))
	})
	return ret, err
}

// GodisClusters returns an object that can list and get GodisClusters.
func (s *godisClusterLister) GodisClusters(namespace string) GodisClusterNamespaceLister {
	return godisClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GodisClusterNamespaceLister helps list and get GodisClusters.
// All objects returned here must be treated as read-only.
type GodisClusterNamespaceLister interface {
	// List lists all GodisClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.GodisCluster, err error)
	// Get retrieves the GodisCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.GodisCluster, error)
	GodisClusterNamespaceListerExpansion
}

// godisClusterNamespaceLister implements the GodisClusterNamespaceLister
// interface.
type godisClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GodisClusters in the indexer for a given namespace.
func (s godisClusterNamespaceLister) List(selector labels.Selector) (ret []*v1.GodisCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GodisCluster))
	})
	return ret, err
}

// Get retrieves the GodisCluster from the indexer for a given namespace and name.
func (s godisClusterNamespaceLister) Get(name string) (*v1.GodisCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("godiscluster"), name)
	}
	return obj.(*v1.GodisCluster), nil
}
